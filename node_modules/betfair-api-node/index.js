/* jslint node:true, esnext:true */
'use strict';

var https = require('https'),
    querystring = require('querystring');


class Betfair {

    /**
     * @contructor
     * @param {string} appKey - Betfair application key
     * @param {string} [username] - Betfair username
     * @param {string} [password] - Betfair password
     * @param {boolean} [keepAlive=false] - Keep token alive till logout
     */
    constructor(appKey, username, password, keepAlive) {
        this.appKey = appKey;
        this.authKey = '';
        this.username = username || '';
        this.password = password || '';
        this.keepAlive = keepAlive || false;
        this.keepAliveTimeout = 3600000;
        this.locale = 'it';

        this.login();
    }

    /**
     * @param {string} [username] - Betfair username
     * @param {string} [password] - Betfair password
     * @param {boolean} [keepAlive] - Keep token alive till logout
     */
    async login (username, password, keepAlive) {
        this.keepAlive = keepAlive || this.keepAlive;

        let response = await this.request('identitysso.betfair.it', '/api/login', 'application/x-www-form-urlencoded', {
            username: username || this.username,
            password: password || this.password
        });
        response = JSON.parse(response)
        this.authKey = response.token;
        if (this.keepAlive) {
            setTimeout(() => {
                this.keepAliveReset();
            }, this.keepAliveTimeout);
        }
    }

    logout () {
        this.keepAlive = false;
        return this.request('identitysso.betfair.it', '/api/logout');
    }

    keepAliveReset () {
        if (this.keepAlive) {
            this.request('identitysso.betfair.it', '/api/keepAlive').then((response) => {
                if (response.status === 'FAIL') {
                    this.login();
                } else {
                    setTimeout(() => {
                        this.keepAliveReset();
                    }, this.keepAliveTimeout);
                }
            });
        }
    }

    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listCompetitions (filter) {
        const response = await this.devApi('listCompetitions', {
            "filter": filter,
            "locale": this.locale
        });
        return response;
    }

    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listCountries (filter) {
        const response = await this.devApi('listCountries', {
            "filter": filter,
            "locale": this.locale
        });
        return response;
    }

    /**
     * @param {object} [params] - optional parameters (refer to betfair docs)
     */
    async listCurrentOrders (params = {}) {
        const response = await this.devApi('listCurrentOrders', params);
        return response;
    }

    /**
     * @param {object} [params] - optional parameters (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listClearedOrders (params) {
        const response = await this.devApi('listClearedOrders', params);
        return response;
    }
    
    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listEvents (filter) {
        let response = await this.devApi('listEvents', {
            "filter": filter,
            "locale": this.locale
        });
        response = JSON.parse(response)
        return response[0].result;
    }
    
    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listEventTypes (filter) {
        const response = await this.devApi('listEventTypes', {
            "filter": filter,
            "locale": this.locale
        });
        return response;
    }
    
    /**
     * @param {array} marketIds - array of market ids
     * @param {object} opts - optional parameters (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listMarketBook (marketIds, opts = {}) {
        let response = await this.devApi('listMarketBook', Object.assign({
            "marketIds": marketIds,
            "locale": this.locale
        }, opts));
        response = JSON.parse(response)
        return response[0].result;
    }
    
    /**
     * @param {number} marketIds
     * @param {number} selectionId
     * @param {object} opts - optional parameters (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
    */
    async listRunnerBook (marketId, selectionId, opts = {}) {
        const response = await this.devApi('listRunnerBook', Object.assign({
            "marketIds": marketId,
            "selectionId": selectionId,
            "locale": this.locale
        }, opts));
        return response;
    }
    
    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @param {number} maxResults - result limit (greater than 0 less than a 1000)
     * @param {object} opts - optional parameters (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listMarketCatalogue (filter, maxResults, opts = {}) {
        let response = await this.devApi('listMarketCatalogue', Object.assign({
            "filter": filter,
            "maxResults": maxResults,
            "locale": this.locale
        }, opts));
        response = JSON.parse(response)
        return response[0].result;
    }
    
    /**
     * @param {object} [params] - optional parameters (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listMarketProfitAndLoss (params = {}) {
        const response = await this.devApi('listMarketProfitAndLoss', params);
        return response;
    }
    
    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listMarketTypes (filter) {
        const response = await this.devApi('listMarketTypes', {
            "filter": filter,
            "locale": this.locale
        });
        return response;
    }
    
    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @param {string} granularity - DAYS/HOURS/MINUTES
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listTimeRanges (filter, granularity) {
        const response = await this.devApi('listTimeRanges', {
            "filter": filter,
            "granularity": granularity,
            "locale": this.locale
        });
        return response;
    }
    
    /**
     * @param {object} filter - Filter options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listVenues (filter) {
        const response = await this.devApi('listVenues', {
            "filter": filter,
            "locale": this.locale
        });
        return response;
    }

    /**
     * @param {string} marketId - Id of market to bet in
     * @param {array<Object>} instructions - Array of placeInstruction objects {@link Betfair.buildPlaceInstruction}
     * @param {object} opts - optional parameters (refer to betfair docs)
     */
    async placeOrders (marketId, instructions, opts = {}) {
        const response = await this.devApi('placeOrders', Object.assign({
            marketId: marketId,
            instructions: instructions,
            "locale": this.locale
        }, opts));
        return response;
    }

    /**
     * @param {string} marketId - Id of market bet was made
     * @param {array<Object>} instructions - Array of placeInstruction objects {@link Betfair.buildCancelInstruction}
     * @param {object} opts - optional parameters (refer to betfair docs)
     */
    async cancelOrders (marketId, instructions, opts = {}) {
        const response = await this.devApi('cancelOrders', Object.assign({
            marketId: marketId,
            instructions: instructions,
            "locale": this.locale
        }, opts));
        return response;
    }

    /**
     * @param {string} marketId - Id of market bet was made
     * @param {array<Object>} instructions - Array of placeInstruction objects {@link Betfair.buildUpdateInstruction}
     * @param {object} opts - optional parameters (refer to betfair docs)
     */
    async updateOrders (marketId, instructions, opts = {}) {
        const response = await this.devApi('updateOrders', Object.assign({
            marketId: marketId,
            instructions: instructions,
            "locale": this.locale
        }, opts));
        return response;
    }

    /**
     * @param {string} marketId - Id of market bet was made
     * @param {array<Object>} instructions - Array of placeInstruction objects {@link Betfair.buildReplaceInstruction}
     * @param {object} opts - optional parameters (refer to betfair docs)
     */
    async replaceOrders (marketId, instructions, opts = {}) {
        const response = await this.devApi('replaceOrders', Object.assign({
            marketId: marketId,
            instructions: instructions,
            "locale": this.locale
        }, opts));
        return response;
    }

    /**
     * @param {string} selectionId - Id of selection to bet on
     * @param {number} handicap - handicap, default=0
     * @param {string} orderType - LIMIT / LIMIT_ON_CLOSE / MARKET_ON_CLOSE
     * @param {string} side - BACK / LAY
     * @param {object} limitOrder - depending on orderType: {@link Betfair.buildLimitOrder} {@link Betfair.buildMarketOnCloseOrder} {@link Betfair.buildLimitOnCloseOrder}
     */
    static buildPlaceInstruction (selectionId, handicap, orderType, side, limitOrder) {
        let orderTypeDictionary = {
            LIMIT: 'limitOrder',
            LIMIT_ON_CLOSE: 'limitOnCloseOrder',
            MARKET_ON_CLOSE: 'marketOnCloseOrder'
        },
        instruction = {
            selectionId: selectionId,
            handicap: handicap || 0,
            orderType: orderType,
            side: side,
            limitOrder: limitOrder
        };
        instruction[orderTypeDictionary[orderType]] = limitOrder;
        return instruction;
    }

    static buildLimitOrder (size, price, persistenceType, timeInForce, minFillSize, betTargetType, betTargetSize) {
        return {
            size: size,
            price: price,
            persistenceType: persistenceType,
            timeInForce: timeInForce,
            minFillSize: minFillSize,
            betTargetType: betTargetType,
            betTargetSize: betTargetSize
        };
    }

    static buildMarketOnCloseOrder (liability) {
        return {
            liability: liability
        };
    }

    static buildLimitOnCloseOrder (liability, price) {
        return {
            liability: liability,
            price: price
        };
    }

    static buildReplaceInstruction(betId, newPrice) {
        return {
            betId: betId,
            newPrice: newPrice
        };
    }

    static buildCancelInstruction (betId, sizeReduction) {
        return {
            betId: betId,
            sizeReduction: sizeReduction
        };
    }

    static buildUpdateInstruction (betId, newPersistenceType) {
        return {
            betId: betId,
            newPersistenceType: newPersistenceType
        };
    }
    
    /**
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async getAccountDetails () {
        const response = await this.accountsApi('getAccountDetails');
        return response;
    }
    
    /**
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async getAccountFunds (wallet) {
        let params = {};
        if (wallet) {
            params.wallet = wallet;
        }
        const response = await this.accountsApi('getAccountFunds', params);
        return response;
    }
    
    /**
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async getDeveloperAppKeys () {
        const response = await this.accountsApi('getDeveloperAppKeys');
        return response; 
    }
    
    /**
     * @param {object} params - options (refer to betfair docs)
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async getAccountStatement (params = {}) {
        const response = await this.accountsApi('getAccountStatement', params);
        return response; 
    }

    /**
     * @param {string} fromCurrency - currency code
     * @return {Promise<Array>} - Promise that resolves with the results in an array
     */
    async listCurrencyRates (fromCurrency) {
        let params = {};
        if (fromCurrency) {
            params.fromCurrency = fromCurrency;
        }
        const response = await this.accountsApi('listCurrencyRates', params);
        return response;
    }

    /**
     * @private
     * @param {string} method - api request method
     * @param {object} params - payload parameters
     */
    devApi (method, params) {
        var def = [{
            "jsonrpc": "2.0",
            "method": "SportsAPING/v1.0/" + method,
            "params": params
        }];
        return this.request('api.betfair.com', '/exchange/betting/json-rpc/v1', 'application/json', JSON.stringify(def));
    }
    
    /**
     * @private
     * @param {string} method - api request method
     * @param {object} params - payload parameters
     */
    accountsApi (method, params) {
        var def = [{
            "jsonrpc": "2.0",
            "method": "AccountAPING/v1.0/" + method,
            "params": params
        }];
        return this.request('api.betfair.com', '/api.betfair.com/exchange/account/json-rpc/v1', 'text/plain;charset=UTF-8', JSON.stringify(def));
    }

    /**
     * @private
     * @param {string} host - hostname of endpoint
     * @param {string} path - path of endpoint
     * @param {string} contentType - content type of payload
     * @param {object} params - payload
     */
    async request (host, path, contentType, params) {
        try {
            return await new Promise((resolve, reject) => {
                var options = {
                    host: host,
                    path: path,
                    port: 443,
                    method: 'POST',
                    headers: {
                        'Content-Type': contentType || 'application/json',
                        'X-Application': this.appKey,
                        'Accept': 'application/json'
                    }
                }, httpReq;

                if (contentType === 'application/x-www-form-urlencoded') {
                    params = querystring.stringify(params);
                    options.headers['Content-Length'] = params.length;
                }

                if (this.authKey) {
                    options.headers['X-Authentication'] = this.authKey;
                }

                httpReq = https.request(options, function (res) {
                    var data = '';
                    res.setEncoding('utf8');
                    res.on('data', function (chunk) {
                        data += chunk;
                    });
                    res.on('end', function () {
                        var response = data;
                        if (response) {
                            resolve(response);
                        } else {
                            reject();
                        }
                    });

                    res.on('error', function (err) {
                        throw new Error(err);
                    });
                });
                if (params) {
                    httpReq.write(params);
                }
                httpReq.end();
            });
        } catch (err_1) {
            return console.log(err_1);
        }
    }
}

module.exports = Betfair;